{"version":3,"file":"wcwidth.js","names":["text: string","code: number","ZERO_WIDTH_RANGES: Array<[number, number]>","ranges: Array<[number, number]>"],"sources":["../src/wcwidth.ts"],"sourcesContent":["/**\n * @fileoverview\n * wcwidth implementation for JavaScript/TypeScript\n *\n * This module provides functions to calculate the display width of Unicode\n * characters and strings in terminal/monospace contexts, compatible with\n * the Python wcwidth library and POSIX wcwidth() standard.\n *\n * Based on Unicode 15.1.0 character width tables.\n */\n\n// Pre-compiled regex for ANSI escape sequences\n// deno-lint-ignore no-control-regex\nconst ANSI_PATTERN = /\\x1b\\[[0-9;]*m/g;\n\n/**\n * Remove all ANSI escape sequences from a string.\n *\n * @param text The string to clean\n * @returns String with ANSI escape sequences removed\n */\nexport function stripAnsi(text: string): string {\n  return text.replace(ANSI_PATTERN, \"\");\n}\n\n/**\n * Calculate the display width of a string, ignoring ANSI escape codes\n * and accounting for Unicode character widths using wcwidth-compatible logic.\n *\n * @param text The string to measure\n * @returns The display width in terminal columns\n */\nexport function getDisplayWidth(text: string): number {\n  // Remove all ANSI escape sequences first\n  const cleanText = stripAnsi(text);\n\n  if (cleanText.length === 0) return 0;\n\n  let width = 0;\n  let i = 0;\n\n  // Process character by character, handling surrogate pairs and combining characters\n  while (i < cleanText.length) {\n    const code = cleanText.codePointAt(i);\n    if (code === undefined) {\n      i++;\n      continue;\n    }\n\n    const charWidth = wcwidth(code);\n    if (charWidth >= 0) {\n      width += charWidth;\n    }\n\n    // Move to next code point (handles surrogate pairs)\n    i += (code > 0xFFFF) ? 2 : 1;\n  }\n\n  return width;\n}\n\n/**\n * Get the display width of a single Unicode code point.\n * Based on wcwidth implementation - returns:\n * -1: Non-printable/control character\n *  0: Zero-width character (combining marks, etc.)\n *  1: Normal width character\n *  2: Wide character (East Asian, emoji, etc.)\n *\n * @param code Unicode code point\n * @returns Display width (-1, 0, 1, or 2)\n */\nexport function wcwidth(code: number): number {\n  // C0 and C1 control characters\n  if (code < 32 || (code >= 0x7F && code < 0xA0)) {\n    return -1;\n  }\n\n  // Zero-width characters (based on wcwidth table_zero.py)\n  if (isZeroWidth(code)) {\n    return 0;\n  }\n\n  // Wide characters (based on wcwidth table_wide.py)\n  if (isWideCharacter(code)) {\n    return 2;\n  }\n\n  return 1;\n}\n\n// Zero-width character ranges (sorted for binary search)\nconst ZERO_WIDTH_RANGES: Array<[number, number]> = [\n  [0x0300, 0x036F], // Combining Diacritical Marks\n  [0x0483, 0x0489], // Hebrew combining marks\n  [0x0591, 0x05BD], // Arabic combining marks\n  [0x05C1, 0x05C2],\n  [0x05C4, 0x05C5],\n  [0x0610, 0x061A], // More Arabic combining marks\n  [0x064B, 0x065F],\n  [0x06D6, 0x06DC],\n  [0x06DF, 0x06E4],\n  [0x06E7, 0x06E8],\n  [0x06EA, 0x06ED],\n  [0x0730, 0x074A],\n  [0x07A6, 0x07B0],\n  [0x07EB, 0x07F3],\n  [0x0816, 0x0819],\n  [0x081B, 0x0823],\n  [0x0825, 0x0827],\n  [0x0829, 0x082D],\n  [0x0859, 0x085B],\n  [0x08D3, 0x08E1],\n  [0x08E3, 0x0902],\n  [0x0941, 0x0948],\n  [0x0951, 0x0957],\n  [0x0962, 0x0963],\n  [0x09C1, 0x09C4],\n  [0x09E2, 0x09E3],\n  [0x0A01, 0x0A02],\n  [0x0A41, 0x0A42],\n  [0x0A47, 0x0A48],\n  [0x0A4B, 0x0A4D],\n  [0x0A70, 0x0A71],\n  [0x0A81, 0x0A82],\n  [0x0AC1, 0x0AC5],\n  [0x0AC7, 0x0AC8],\n  [0x0AE2, 0x0AE3],\n  [0x0AFA, 0x0AFF],\n  [0x0B41, 0x0B44],\n  [0x0B55, 0x0B56],\n  [0x0B62, 0x0B63],\n  [0x0C3E, 0x0C40],\n  [0x0C46, 0x0C48],\n  [0x0C4A, 0x0C4D],\n  [0x0C55, 0x0C56],\n  [0x0C62, 0x0C63],\n  [0x0CCC, 0x0CCD],\n  [0x0CE2, 0x0CE3],\n  [0x0D00, 0x0D01],\n  [0x0D3B, 0x0D3C],\n  [0x0D62, 0x0D63],\n  [0x0DD2, 0x0DD4],\n  [0x0E34, 0x0E3A],\n  [0x0E47, 0x0E4E],\n  [0x0EB4, 0x0EBC],\n  [0x0EC8, 0x0ECD],\n  [0x0F18, 0x0F19],\n  [0x0F71, 0x0F7E],\n  [0x0F80, 0x0F84],\n  [0x0F86, 0x0F87],\n  [0x0F8D, 0x0F97],\n  [0x0F99, 0x0FBC],\n  [0x102D, 0x1030],\n  [0x1032, 0x1037],\n  [0x1039, 0x103A],\n  [0x103D, 0x103E],\n  [0x1058, 0x1059],\n  [0x105E, 0x1060],\n  [0x1071, 0x1074],\n  [0x1085, 0x1086],\n  [0x135D, 0x135F],\n  [0x1712, 0x1714],\n  [0x1732, 0x1734],\n  [0x1752, 0x1753],\n  [0x1772, 0x1773],\n  [0x17B4, 0x17B5],\n  [0x17B7, 0x17BD],\n  [0x17C9, 0x17D3],\n  [0x180B, 0x180D],\n  [0x1885, 0x1886],\n  [0x1920, 0x1922],\n  [0x1927, 0x1928],\n  [0x1939, 0x193B],\n  [0x1A17, 0x1A18],\n  [0x1A58, 0x1A5E],\n  [0x1A65, 0x1A6C],\n  [0x1A73, 0x1A7C],\n  [0x1AB0, 0x1ABE],\n  [0x1B00, 0x1B03],\n  [0x1B36, 0x1B3A],\n  [0x1B6B, 0x1B73],\n  [0x1B80, 0x1B81],\n  [0x1BA2, 0x1BA5],\n  [0x1BA8, 0x1BA9],\n  [0x1BAB, 0x1BAD],\n  [0x1BE8, 0x1BE9],\n  [0x1BEF, 0x1BF1],\n  [0x1C2C, 0x1C33],\n  [0x1C36, 0x1C37],\n  [0x1CD0, 0x1CD2],\n  [0x1CD4, 0x1CE0],\n  [0x1CE2, 0x1CE8],\n  [0x1CF8, 0x1CF9],\n  [0x1DC0, 0x1DF9],\n  [0x1DFB, 0x1DFF],\n  [0x200B, 0x200F], // Zero-width spaces\n  [0x202A, 0x202E], // Bidirectional format characters\n  [0x2060, 0x2064], // Word joiner, etc.\n  [0x2066, 0x206F], // More bidirectional\n  [0xFE00, 0xFE0F], // Variation selectors\n  [0xFE20, 0xFE2F], // Combining half marks\n];\n\n// Single zero-width characters\nconst ZERO_WIDTH_SINGLES = new Set([\n  0x05BF,\n  0x05C7,\n  0x0670,\n  0x0711,\n  0x07FD,\n  0x093A,\n  0x093C,\n  0x094D,\n  0x0981,\n  0x09BC,\n  0x09CD,\n  0x09FE,\n  0x0A3C,\n  0x0A51,\n  0x0A75,\n  0x0ABC,\n  0x0ACD,\n  0x0B01,\n  0x0B3C,\n  0x0B3F,\n  0x0B4D,\n  0x0B82,\n  0x0BC0,\n  0x0BCD,\n  0x0C00,\n  0x0C04,\n  0x0C81,\n  0x0CBC,\n  0x0CBF,\n  0x0CC6,\n  0x0D41,\n  0x0D44,\n  0x0D4D,\n  0x0D81,\n  0x0DCA,\n  0x0DD6,\n  0x0E31,\n  0x0EB1,\n  0x0F35,\n  0x0F37,\n  0x0F39,\n  0x0FC6,\n  0x1082,\n  0x108D,\n  0x109D,\n  0x17C6,\n  0x17DD,\n  0x18A9,\n  0x1932,\n  0x1A1B,\n  0x1A56,\n  0x1A60,\n  0x1A62,\n  0x1A7F,\n  0x1B34,\n  0x1B3C,\n  0x1B42,\n  0x1BE6,\n  0x1BED,\n  0x1CED,\n  0x1CF4,\n  0xFEFF,\n]);\n\n/**\n * Binary search to check if a value is within any range\n */\nfunction isInRanges(code: number, ranges: Array<[number, number]>): boolean {\n  let left = 0;\n  let right = ranges.length - 1;\n\n  while (left <= right) {\n    const mid = Math.floor((left + right) / 2);\n    const [start, end] = ranges[mid];\n\n    if (code >= start && code <= end) {\n      return true;\n    } else if (code < start) {\n      right = mid - 1;\n    } else {\n      left = mid + 1;\n    }\n  }\n\n  return false;\n}\n\n/**\n * Check if a character is zero-width (combining marks, etc.)\n * Based on wcwidth's zero-width table.\n *\n * @param code Unicode code point\n * @returns True if the character has zero display width\n */\nfunction isZeroWidth(code: number): boolean {\n  return ZERO_WIDTH_SINGLES.has(code) || isInRanges(code, ZERO_WIDTH_RANGES);\n}\n\n/**\n * Check if a character code point represents a wide character.\n * Based on wcwidth's wide character table (selected ranges from Unicode 15.1.0).\n *\n * @param code Unicode code point\n * @returns True if the character has width 2\n */\nfunction isWideCharacter(code: number): boolean {\n  // cSpell: disable\n  return (\n    // Based on wcwidth table_wide.py for Unicode 15.1.0\n    (code >= 0x1100 && code <= 0x115F) || // Hangul Jamo\n    (code >= 0x231A && code <= 0x231B) || // Watch, Hourglass\n    (code >= 0x2329 && code <= 0x232A) || // Angle brackets\n    (code >= 0x23E9 && code <= 0x23EC) || // Media controls\n    code === 0x23F0 || code === 0x23F3 || // Alarm clock, hourglass\n    (code >= 0x25FD && code <= 0x25FE) || // Small squares\n    (code >= 0x2614 && code <= 0x2615) || // Umbrella, coffee\n    (code >= 0x2648 && code <= 0x2653) || // Zodiac signs\n    code === 0x267F || code === 0x2693 || // Wheelchair, anchor\n    code === 0x26A0 || code === 0x26A1 || code === 0x26AA || code === 0x26AB || // Warning, lightning, circles\n    (code >= 0x26BD && code <= 0x26BE) || // Sports balls\n    (code >= 0x26C4 && code <= 0x26C5) || // Weather\n    code === 0x26CE || code === 0x26D4 || // Ophiuchus, no entry\n    (code >= 0x26EA && code <= 0x26EA) || // Church\n    (code >= 0x26F2 && code <= 0x26F3) || // Fountain, golf\n    code === 0x26F5 || code === 0x26FA || // Sailboat, tent\n    code === 0x26FD || // Gas pump\n    (code >= 0x2705 && code <= 0x2705) || // Check mark\n    (code >= 0x270A && code <= 0x270B) || // Raised fists\n    code === 0x2728 || // Sparkles (✨)\n    code === 0x274C || // Cross mark (❌)\n    code === 0x274E || // Cross mark button\n    (code >= 0x2753 && code <= 0x2755) || // Question marks\n    code === 0x2757 || // Exclamation\n    (code >= 0x2795 && code <= 0x2797) || // Plus signs\n    code === 0x27B0 || code === 0x27BF || // Curly loop, double curly loop\n    (code >= 0x2B1B && code <= 0x2B1C) || // Large squares\n    code === 0x2B50 || code === 0x2B55 || // Star, circle\n    (code >= 0x2E80 && code <= 0x2E99) || // CJK Radicals Supplement\n    (code >= 0x2E9B && code <= 0x2EF3) ||\n    (code >= 0x2F00 && code <= 0x2FD5) || // Kangxi Radicals\n    (code >= 0x2FF0 && code <= 0x2FFB) || // Ideographic Description Characters\n    (code >= 0x3000 && code <= 0x303E) || // CJK Symbols and Punctuation\n    (code >= 0x3041 && code <= 0x3096) || // Hiragana\n    (code >= 0x3099 && code <= 0x30FF) || // Katakana\n    (code >= 0x3105 && code <= 0x312F) || // Bopomofo\n    (code >= 0x3131 && code <= 0x318E) || // Hangul Compatibility Jamo\n    (code >= 0x3190 && code <= 0x31E3) || // Various CJK\n    (code >= 0x31F0 && code <= 0x321E) || // Katakana Phonetic Extensions\n    (code >= 0x3220 && code <= 0x3247) || // Enclosed CJK Letters and Months\n    (code >= 0x3250 && code <= 0x4DBF) || // Various CJK\n    (code >= 0x4E00 && code <= 0x9FFF) || // CJK Unified Ideographs\n    (code >= 0xA960 && code <= 0xA97F) || // Hangul Jamo Extended-A\n    (code >= 0xAC00 && code <= 0xD7A3) || // Hangul Syllables\n    (code >= 0xD7B0 && code <= 0xD7C6) || // Hangul Jamo Extended-B\n    (code >= 0xF900 && code <= 0xFAFF) || // CJK Compatibility Ideographs\n    (code >= 0xFE10 && code <= 0xFE19) || // Vertical Forms\n    (code >= 0xFE30 && code <= 0xFE6F) || // CJK Compatibility Forms\n    (code >= 0xFF00 && code <= 0xFF60) || // Fullwidth Forms\n    (code >= 0xFFE0 && code <= 0xFFE6) || // Fullwidth Forms\n    (code >= 0x16FE0 && code <= 0x16FE4) || // Tangut\n    (code >= 0x16FF0 && code <= 0x16FF1) ||\n    (code >= 0x17000 && code <= 0x187F7) || // Tangut\n    (code >= 0x18800 && code <= 0x18CD5) || // Tangut Components\n    (code >= 0x18D00 && code <= 0x18D08) || // Tangut Supplement\n    (code >= 0x1AFF0 && code <= 0x1AFF3) ||\n    (code >= 0x1AFF5 && code <= 0x1AFFB) ||\n    (code >= 0x1AFFD && code <= 0x1AFFE) ||\n    (code >= 0x1B000 && code <= 0x1B122) || // Kana Extended-A/Supplement\n    (code >= 0x1B150 && code <= 0x1B152) ||\n    (code >= 0x1B164 && code <= 0x1B167) ||\n    (code >= 0x1B170 && code <= 0x1B2FB) ||\n    code === 0x1F004 || // Mahjong Red Dragon\n    code === 0x1F0CF || // Playing Card Black Joker\n    (code >= 0x1F18E && code <= 0x1F18E) || // AB Button\n    (code >= 0x1F191 && code <= 0x1F19A) || // Various squared symbols\n    (code >= 0x1F1E6 && code <= 0x1F1FF) || // Regional Indicator Symbols (flags)\n    (code >= 0x1F200 && code <= 0x1F202) || // Squared symbols\n    (code >= 0x1F210 && code <= 0x1F23B) || // Squared CJK\n    (code >= 0x1F240 && code <= 0x1F248) || // Tortoise shell bracketed\n    (code >= 0x1F250 && code <= 0x1F251) || // Circled ideographs\n    (code >= 0x1F260 && code <= 0x1F265) ||\n    (code >= 0x1F300 && code <= 0x1F6D7) || // Large emoji block\n    (code >= 0x1F6E0 && code <= 0x1F6EC) ||\n    (code >= 0x1F6F0 && code <= 0x1F6FC) ||\n    (code >= 0x1F700 && code <= 0x1F773) ||\n    (code >= 0x1F780 && code <= 0x1F7D8) ||\n    (code >= 0x1F7E0 && code <= 0x1F7EB) ||\n    (code >= 0x1F7F0 && code <= 0x1F7F0) ||\n    (code >= 0x1F800 && code <= 0x1F80B) ||\n    (code >= 0x1F810 && code <= 0x1F847) ||\n    (code >= 0x1F850 && code <= 0x1F859) ||\n    (code >= 0x1F860 && code <= 0x1F887) ||\n    (code >= 0x1F890 && code <= 0x1F8AD) ||\n    (code >= 0x1F8B0 && code <= 0x1F8B1) ||\n    (code >= 0x1F900 && code <= 0x1FA53) || // Supplemental symbols and pictographs\n    (code >= 0x1FA60 && code <= 0x1FA6D) ||\n    (code >= 0x1FA70 && code <= 0x1FA7C) ||\n    (code >= 0x1FA80 && code <= 0x1FA88) ||\n    (code >= 0x1FA90 && code <= 0x1FABD) ||\n    (code >= 0x1FABF && code <= 0x1FAC5) ||\n    (code >= 0x1FACE && code <= 0x1FADB) ||\n    (code >= 0x1FAE0 && code <= 0x1FAE8) ||\n    (code >= 0x1FAF0 && code <= 0x1FAF8) ||\n    (code >= 0x20000 && code <= 0x2FFFD) || // CJK Extension B\n    (code >= 0x30000 && code <= 0x3FFFD) // CJK Extension C\n  );\n  // cSpell: enable\n}\n"],"mappings":";;;;;;;;;;;AAaA,MAAM,eAAe;;;;;;;AAQrB,SAAgB,UAAUA,MAAsB;AAC9C,QAAO,KAAK,QAAQ,cAAc,GAAG;AACtC;;;;;;;;AASD,SAAgB,gBAAgBA,MAAsB;CAEpD,MAAM,YAAY,UAAU,KAAK;AAEjC,KAAI,UAAU,WAAW,EAAG,QAAO;CAEnC,IAAI,QAAQ;CACZ,IAAI,IAAI;AAGR,QAAO,IAAI,UAAU,QAAQ;EAC3B,MAAM,OAAO,UAAU,YAAY,EAAE;AACrC,MAAI,iBAAoB;AACtB;AACA;EACD;EAED,MAAM,YAAY,QAAQ,KAAK;AAC/B,MAAI,aAAa,EACf,UAAS;AAIX,OAAM,OAAO,QAAU,IAAI;CAC5B;AAED,QAAO;AACR;;;;;;;;;;;;AAaD,SAAgB,QAAQC,MAAsB;AAE5C,KAAI,OAAO,MAAO,QAAQ,OAAQ,OAAO,IACvC,QAAO;AAIT,KAAI,YAAY,KAAK,CACnB,QAAO;AAIT,KAAI,gBAAgB,KAAK,CACvB,QAAO;AAGT,QAAO;AACR;AAGD,MAAMC,oBAA6C;CACjD,CAAC,KAAQ,GAAO;CAChB,CAAC,MAAQ,IAAO;CAChB,CAAC,MAAQ,IAAO;CAChB,CAAC,MAAQ,IAAO;CAChB,CAAC,MAAQ,IAAO;CAChB,CAAC,MAAQ,IAAO;CAChB,CAAC,MAAQ,IAAO;CAChB,CAAC,MAAQ,IAAO;CAChB,CAAC,MAAQ,IAAO;CAChB,CAAC,MAAQ,IAAO;CAChB,CAAC,MAAQ,IAAO;CAChB,CAAC,MAAQ,IAAO;CAChB,CAAC,MAAQ,IAAO;CAChB,CAAC,MAAQ,IAAO;CAChB,CAAC,MAAQ,IAAO;CAChB,CAAC,MAAQ,IAAO;CAChB,CAAC,MAAQ,IAAO;CAChB,CAAC,MAAQ,IAAO;CAChB,CAAC,MAAQ,IAAO;CAChB,CAAC,MAAQ,IAAO;CAChB,CAAC,MAAQ,IAAO;CAChB,CAAC,MAAQ,IAAO;CAChB,CAAC,MAAQ,IAAO;CAChB,CAAC,MAAQ,IAAO;CAChB,CAAC,MAAQ,IAAO;CAChB,CAAC,MAAQ,IAAO;CAChB,CAAC,MAAQ,IAAO;CAChB,CAAC,MAAQ,IAAO;CAChB,CAAC,MAAQ,IAAO;CAChB,CAAC,MAAQ,IAAO;CAChB,CAAC,MAAQ,IAAO;CAChB,CAAC,MAAQ,IAAO;CAChB,CAAC,MAAQ,IAAO;CAChB,CAAC,MAAQ,IAAO;CAChB,CAAC,MAAQ,IAAO;CAChB,CAAC,MAAQ,IAAO;CAChB,CAAC,MAAQ,IAAO;CAChB,CAAC,MAAQ,IAAO;CAChB,CAAC,MAAQ,IAAO;CAChB,CAAC,MAAQ,IAAO;CAChB,CAAC,MAAQ,IAAO;CAChB,CAAC,MAAQ,IAAO;CAChB,CAAC,MAAQ,IAAO;CAChB,CAAC,MAAQ,IAAO;CAChB,CAAC,MAAQ,IAAO;CAChB,CAAC,MAAQ,IAAO;CAChB,CAAC,MAAQ,IAAO;CAChB,CAAC,MAAQ,IAAO;CAChB,CAAC,MAAQ,IAAO;CAChB,CAAC,MAAQ,IAAO;CAChB,CAAC,MAAQ,IAAO;CAChB,CAAC,MAAQ,IAAO;CAChB,CAAC,MAAQ,IAAO;CAChB,CAAC,MAAQ,IAAO;CAChB,CAAC,MAAQ,IAAO;CAChB,CAAC,MAAQ,IAAO;CAChB,CAAC,MAAQ,IAAO;CAChB,CAAC,MAAQ,IAAO;CAChB,CAAC,MAAQ,IAAO;CAChB,CAAC,MAAQ,IAAO;CAChB,CAAC,MAAQ,IAAO;CAChB,CAAC,MAAQ,IAAO;CAChB,CAAC,MAAQ,IAAO;CAChB,CAAC,MAAQ,IAAO;CAChB,CAAC,MAAQ,IAAO;CAChB,CAAC,MAAQ,IAAO;CAChB,CAAC,MAAQ,IAAO;CAChB,CAAC,MAAQ,IAAO;CAChB,CAAC,MAAQ,IAAO;CAChB,CAAC,MAAQ,IAAO;CAChB,CAAC,MAAQ,IAAO;CAChB,CAAC,MAAQ,IAAO;CAChB,CAAC,MAAQ,IAAO;CAChB,CAAC,MAAQ,IAAO;CAChB,CAAC,MAAQ,IAAO;CAChB,CAAC,MAAQ,IAAO;CAChB,CAAC,MAAQ,IAAO;CAChB,CAAC,MAAQ,IAAO;CAChB,CAAC,MAAQ,IAAO;CAChB,CAAC,MAAQ,IAAO;CAChB,CAAC,MAAQ,IAAO;CAChB,CAAC,MAAQ,IAAO;CAChB,CAAC,MAAQ,IAAO;CAChB,CAAC,MAAQ,IAAO;CAChB,CAAC,MAAQ,IAAO;CAChB,CAAC,MAAQ,IAAO;CAChB,CAAC,MAAQ,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UAAW,QAAQ,UAC3B,QAAQ,UAAW,QAAQ,UAC3B,QAAQ,UAAW,QAAQ,UAC3B,QAAQ,UAAW,QAAQ,UAC5B,SAAS,UACT,SAAS,UACR,QAAQ,UAAW,QAAQ,UAC3B,QAAQ,UAAW,QAAQ,UAC3B,QAAQ,UAAW,QAAQ,UAC3B,QAAQ,UAAW,QAAQ,UAC3B,QAAQ,UAAW,QAAQ,UAC3B,QAAQ,UAAW,QAAQ,UAC3B,QAAQ,UAAW,QAAQ,UAC3B,QAAQ,UAAW,QAAQ,UAC3B,QAAQ,UAAW,QAAQ,UAC3B,QAAQ,UAAW,QAAQ,UAC3B,QAAQ,UAAW,QAAQ,UAC3B,QAAQ,UAAW,QAAQ,UAC3B,QAAQ,UAAW,QAAQ,UAC3B,QAAQ,UAAW,QAAQ,UAC3B,QAAQ,UAAW,QAAQ,UAC3B,QAAQ,UAAW,QAAQ,UAC3B,QAAQ,UAAW,QAAQ,UAC3B,QAAQ,UAAW,QAAQ,UAC3B,QAAQ,UAAW,QAAQ,UAC3B,QAAQ,UAAW,QAAQ,UAC3B,QAAQ,UAAW,QAAQ,UAC3B,QAAQ,UAAW,QAAQ,UAC3B,QAAQ,UAAW,QAAQ,UAC3B,QAAQ,UAAW,QAAQ,UAC3B,QAAQ,UAAW,QAAQ,UAC3B,QAAQ,UAAW,QAAQ,UAC3B,QAAQ,UAAW,QAAQ,UAC3B,QAAQ,UAAW,QAAQ,UAC3B,QAAQ,UAAW,QAAQ,UAC3B,QAAQ,UAAW,QAAQ,UAC3B,QAAQ,UAAW,QAAQ,UAC3B,QAAQ,UAAW,QAAQ;AAG/B"}