{"version":3,"file":"truncate.js","names":["category: readonly string[]","maxWidth: number","separator: string","strategy: TruncationStrategy"],"sources":["../src/truncate.ts"],"sourcesContent":["/**\n * Truncation strategies for category names.\n *\n * @since 1.0.0\n */\nexport type TruncationStrategy = \"middle\" | \"end\" | false;\n\n/**\n * Truncates a category array to fit within a maximum width using the specified strategy.\n *\n * This function intelligently shortens long hierarchical category names while\n * preserving important context. The truncation behavior depends on the chosen\n * strategy:\n *\n * - `\"middle\"`: Keeps the first and last segments with \"…\" in between\n * - `\"end\"`: Truncates at the end with \"…\" suffix\n * - `false`: No truncation (returns full category string)\n *\n * When the category is too long even for middle truncation (first + \"…\" + last\n * exceeds maxWidth), it falls back to end truncation.\n *\n * @param category The category segments to truncate.\n * @param maxWidth Maximum width for the category string.\n * @param separator Category separator (default: \".\").\n * @param strategy Truncation strategy to use (default: \"middle\").\n * @returns The truncated category string.\n *\n * @example\n * ```typescript\n * // Middle truncation\n * truncateCategory([\"app\", \"server\", \"http\", \"auth\"], 15, \".\", \"middle\");\n * // Returns: \"app…auth\"\n *\n * // End truncation\n * truncateCategory([\"app\", \"server\", \"http\", \"auth\"], 15, \".\", \"end\");\n * // Returns: \"app.server.h…\"\n *\n * // No truncation\n * truncateCategory([\"app\", \"auth\"], 20, \".\", false);\n * // Returns: \"app.auth\"\n * ```\n *\n * @since 1.0.0\n */\nexport function truncateCategory(\n  category: readonly string[],\n  maxWidth: number,\n  separator: string = \".\",\n  strategy: TruncationStrategy = \"middle\",\n): string {\n  if (!strategy || maxWidth <= 0) {\n    return category.join(separator);\n  }\n\n  const full = category.join(separator);\n  if (full.length <= maxWidth) {\n    return full;\n  }\n\n  // Minimum width needed for truncation with ellipsis\n  const minWidth = 5; // e.g., \"a…z\"\n  if (maxWidth < minWidth) {\n    return \"…\";\n  }\n\n  if (strategy === \"end\") {\n    return full.substring(0, maxWidth - 1) + \"…\";\n  }\n\n  // Middle truncation strategy\n  if (category.length <= 2) {\n    // For short categories, just truncate the end\n    return full.substring(0, maxWidth - 1) + \"…\";\n  }\n\n  // Try to keep first and last segments\n  const first = category[0];\n  const last = category[category.length - 1];\n  const ellipsis = \"…\";\n\n  // Check if we can at least fit first…last\n  const minimalLength = first.length + ellipsis.length + last.length;\n  if (minimalLength > maxWidth) {\n    // Even minimal format is too long, fallback to end truncation\n    return full.substring(0, maxWidth - 1) + \"…\";\n  }\n\n  // For simple case with limited space, just do first…last\n  return `${first}${ellipsis}${last}`;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4CA,SAAgB,iBACdA,UACAC,UACAC,YAAoB,KACpBC,WAA+B,UACvB;AACR,MAAK,YAAY,YAAY,EAC3B,QAAO,SAAS,KAAK,UAAU;CAGjC,MAAM,OAAO,SAAS,KAAK,UAAU;AACrC,KAAI,KAAK,UAAU,SACjB,QAAO;CAIT,MAAM,WAAW;AACjB,KAAI,WAAW,SACb,QAAO;AAGT,KAAI,aAAa,MACf,QAAO,KAAK,UAAU,GAAG,WAAW,EAAE,GAAG;AAI3C,KAAI,SAAS,UAAU,EAErB,QAAO,KAAK,UAAU,GAAG,WAAW,EAAE,GAAG;CAI3C,MAAM,QAAQ,SAAS;CACvB,MAAM,OAAO,SAAS,SAAS,SAAS;CACxC,MAAM,WAAW;CAGjB,MAAM,gBAAgB,MAAM,SAAS,SAAS,SAAS,KAAK;AAC5D,KAAI,gBAAgB,SAElB,QAAO,KAAK,UAAU,GAAG,WAAW,EAAE,GAAG;AAI3C,SAAQ,EAAE,MAAM,EAAE,SAAS,EAAE,KAAK;AACnC"}