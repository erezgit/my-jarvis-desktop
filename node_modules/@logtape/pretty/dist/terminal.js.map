{"version":3,"file":"terminal.js","names":["defaultWidth: number"],"sources":["../src/terminal.ts"],"sourcesContent":["// deno-lint-ignore-file no-process-global\n/// <reference types=\"@types/node\" />\n/**\n * @fileoverview\n * Terminal detection and width calculation utilities\n *\n * Provides cross-runtime compatible functions to detect if the process\n * is attached to a terminal and get the terminal width.\n */\n\n/**\n * Detect if the current process is attached to a terminal (TTY).\n *\n * @returns True if stdout is connected to a terminal\n */\nexport function isTerminal(): boolean {\n  try {\n    // Deno runtime\n    if (typeof Deno !== \"undefined\") {\n      // Use modern Deno API\n      if (Deno.stdout.isTerminal) {\n        return Deno.stdout.isTerminal();\n      }\n    }\n\n    // Node.js/Bun runtime\n    if (typeof process !== \"undefined\" && process.stdout) {\n      return Boolean(process.stdout.isTTY);\n    }\n\n    // Browser environment - never a terminal\n    if (typeof window !== \"undefined\") {\n      return false;\n    }\n\n    // Unknown environment - assume not a terminal\n    return false;\n  } catch {\n    // If any detection method fails, assume not a terminal\n    return false;\n  }\n}\n\n/**\n * Get the current terminal width in columns.\n *\n * @returns Terminal width in columns, or null if not available\n */\nexport function getTerminalWidth(): number | null {\n  try {\n    // Deno runtime\n    if (typeof Deno !== \"undefined\") {\n      // Try to get console size\n      if (Deno.consoleSize) {\n        const size = Deno.consoleSize();\n        return size?.columns || null;\n      }\n    }\n\n    // Node.js/Bun runtime\n    if (typeof process !== \"undefined\" && process.stdout) {\n      return process.stdout.columns || null;\n    }\n\n    // Fallback to environment variable\n    const envColumns = typeof Deno !== \"undefined\"\n      ? Deno.env.get(\"COLUMNS\")\n      : process?.env?.COLUMNS;\n\n    if (envColumns) {\n      const parsed = parseInt(envColumns, 10);\n      return isNaN(parsed) ? null : parsed;\n    }\n\n    return null;\n  } catch {\n    return null;\n  }\n}\n\n/**\n * Get the optimal word wrap width based on terminal detection.\n *\n * @param defaultWidth Default width to use when not in a terminal\n * @returns The optimal width\n */\nexport function getOptimalWordWrapWidth(defaultWidth: number = 80): number {\n  if (!isTerminal()) {\n    return defaultWidth;\n  }\n\n  const terminalWidth = getTerminalWidth();\n  return terminalWidth || defaultWidth;\n}\n"],"mappings":";;;;;;;;;;;;;AAeA,SAAgB,aAAsB;AACpC,KAAI;AAEF,aAAW,SAAS,aAElB;OAAI,KAAK,OAAO,WACd,QAAO,KAAK,OAAO,YAAY;EAChC;AAIH,aAAW,YAAY,eAAe,QAAQ,OAC5C,QAAO,QAAQ,QAAQ,OAAO,MAAM;AAItC,aAAW,WAAW,YACpB,QAAO;AAIT,SAAO;CACR,QAAO;AAEN,SAAO;CACR;AACF;;;;;;AAOD,SAAgB,mBAAkC;AAChD,KAAI;AAEF,aAAW,SAAS,aAElB;OAAI,KAAK,aAAa;IACpB,MAAM,OAAO,KAAK,aAAa;AAC/B,WAAO,MAAM,WAAW;GACzB;;AAIH,aAAW,YAAY,eAAe,QAAQ,OAC5C,QAAO,QAAQ,OAAO,WAAW;EAInC,MAAM,oBAAoB,SAAS,cAC/B,KAAK,IAAI,IAAI,UAAU,GACvB,SAAS,KAAK;AAElB,MAAI,YAAY;GACd,MAAM,SAAS,SAAS,YAAY,GAAG;AACvC,UAAO,MAAM,OAAO,GAAG,OAAO;EAC/B;AAED,SAAO;CACR,QAAO;AACN,SAAO;CACR;AACF;;;;;;;AAQD,SAAgB,wBAAwBA,eAAuB,IAAY;AACzE,MAAK,YAAY,CACf,QAAO;CAGT,MAAM,gBAAgB,kBAAkB;AACxC,QAAO,iBAAiB;AACzB"}