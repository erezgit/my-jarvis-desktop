{"version":3,"file":"filter.js","names":["filter: FilterLike","level: LogLevel | null","record: LogRecord"],"sources":["../src/filter.ts"],"sourcesContent":["import type { LogLevel } from \"./level.ts\";\nimport type { LogRecord } from \"./record.ts\";\n\n/**\n * A filter is a function that accepts a log record and returns `true` if the\n * record should be passed to the sink.\n *\n * @param record The log record to filter.\n * @returns `true` if the record should be passed to the sink.\n */\nexport type Filter = (record: LogRecord) => boolean;\n\n/**\n * A filter-like value is either a {@link Filter} or a {@link LogLevel}.\n * `null` is also allowed to represent a filter that rejects all records.\n */\nexport type FilterLike = Filter | LogLevel | null;\n\n/**\n * Converts a {@link FilterLike} value to an actual {@link Filter}.\n *\n * @param filter The filter-like value to convert.\n * @returns The actual filter.\n */\nexport function toFilter(filter: FilterLike): Filter {\n  if (typeof filter === \"function\") return filter;\n  return getLevelFilter(filter);\n}\n\n/**\n * Returns a filter that accepts log records with the specified level.\n *\n * @param level The level to filter by.  If `null`, the filter will reject all\n *              records.\n * @returns The filter.\n */\nexport function getLevelFilter(level: LogLevel | null): Filter {\n  if (level == null) return () => false;\n  if (level === \"fatal\") {\n    return (record: LogRecord) => record.level === \"fatal\";\n  } else if (level === \"error\") {\n    return (record: LogRecord) =>\n      record.level === \"fatal\" || record.level === \"error\";\n  } else if (level === \"warning\") {\n    return (record: LogRecord) =>\n      record.level === \"fatal\" ||\n      record.level === \"error\" ||\n      record.level === \"warning\";\n  } else if (level === \"info\") {\n    return (record: LogRecord) =>\n      record.level === \"fatal\" ||\n      record.level === \"error\" ||\n      record.level === \"warning\" ||\n      record.level === \"info\";\n  } else if (level === \"debug\") {\n    return (record: LogRecord) =>\n      record.level === \"fatal\" ||\n      record.level === \"error\" ||\n      record.level === \"warning\" ||\n      record.level === \"info\" ||\n      record.level === \"debug\";\n  } else if (level === \"trace\") return () => true;\n  throw new TypeError(`Invalid log level: ${level}.`);\n}\n"],"mappings":";;;;;;;AAwBA,SAAgB,SAASA,QAA4B;AACnD,YAAW,WAAW,WAAY,QAAO;AACzC,QAAO,eAAe,OAAO;AAC9B;;;;;;;;AASD,SAAgB,eAAeC,OAAgC;AAC7D,KAAI,SAAS,KAAM,QAAO,MAAM;AAChC,KAAI,UAAU,QACZ,QAAO,CAACC,WAAsB,OAAO,UAAU;UACtC,UAAU,QACnB,QAAO,CAACA,WACN,OAAO,UAAU,WAAW,OAAO,UAAU;UACtC,UAAU,UACnB,QAAO,CAACA,WACN,OAAO,UAAU,WACjB,OAAO,UAAU,WACjB,OAAO,UAAU;UACV,UAAU,OACnB,QAAO,CAACA,WACN,OAAO,UAAU,WACjB,OAAO,UAAU,WACjB,OAAO,UAAU,aACjB,OAAO,UAAU;UACV,UAAU,QACnB,QAAO,CAACA,WACN,OAAO,UAAU,WACjB,OAAO,UAAU,WACjB,OAAO,UAAU,aACjB,OAAO,UAAU,UACjB,OAAO,UAAU;UACV,UAAU,QAAS,QAAO,MAAM;AAC3C,OAAM,IAAI,WAAW,qBAAqB,MAAM;AACjD"}