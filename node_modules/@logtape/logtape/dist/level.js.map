{"version":3,"file":"level.js","names":["level: string","a: LogLevel","b: LogLevel"],"sources":["../src/level.ts"],"sourcesContent":["const logLevels = [\n  \"trace\",\n  \"debug\",\n  \"info\",\n  \"warning\",\n  \"error\",\n  \"fatal\",\n] as const;\n\n/**\n * The severity level of a {@link LogRecord}.\n */\nexport type LogLevel = typeof logLevels[number];\n\n/**\n * Lists all available log levels with the order of their severity.\n * The `\"trace\"` level goes first, and the `\"fatal\"` level goes last.\n * @returns A new copy of the array of log levels.\n * @since 1.0.0\n */\nexport function getLogLevels(): readonly LogLevel[] {\n  return [...logLevels];\n}\n\n/**\n * Parses a log level from a string.\n *\n * @param level The log level as a string.  This is case-insensitive.\n * @returns The log level.\n * @throws {TypeError} If the log level is invalid.\n */\nexport function parseLogLevel(level: string): LogLevel {\n  level = level.toLowerCase();\n  switch (level) {\n    case \"trace\":\n    case \"debug\":\n    case \"info\":\n    case \"warning\":\n    case \"error\":\n    case \"fatal\":\n      return level;\n    default:\n      throw new TypeError(`Invalid log level: ${level}.`);\n  }\n}\n\n/**\n * Checks if a string is a valid log level.  This function can be used as\n * as a type guard to narrow the type of a string to a {@link LogLevel}.\n *\n * @param level The log level as a string.  This is case-sensitive.\n * @returns `true` if the string is a valid log level.\n */\nexport function isLogLevel(level: string): level is LogLevel {\n  switch (level) {\n    case \"trace\":\n    case \"debug\":\n    case \"info\":\n    case \"warning\":\n    case \"error\":\n    case \"fatal\":\n      return true;\n    default:\n      return false;\n  }\n}\n\n/**\n * Compares two log levels.\n * @param a The first log level.\n * @param b The second log level.\n * @returns A negative number if `a` is less than `b`, a positive number if `a`\n *          is greater than `b`, or zero if they are equal.\n * @since 0.8.0\n */\nexport function compareLogLevel(a: LogLevel, b: LogLevel): number {\n  const aIndex = logLevels.indexOf(a);\n  if (aIndex < 0) {\n    throw new TypeError(`Invalid log level: ${JSON.stringify(a)}.`);\n  }\n  const bIndex = logLevels.indexOf(b);\n  if (bIndex < 0) {\n    throw new TypeError(`Invalid log level: ${JSON.stringify(b)}.`);\n  }\n  return aIndex - bIndex;\n}\n"],"mappings":";AAAA,MAAM,YAAY;CAChB;CACA;CACA;CACA;CACA;CACA;AACD;;;;;;;AAaD,SAAgB,eAAoC;AAClD,QAAO,CAAC,GAAG,SAAU;AACtB;;;;;;;;AASD,SAAgB,cAAcA,OAAyB;AACrD,SAAQ,MAAM,aAAa;AAC3B,SAAQ,OAAR;EACE,KAAK;EACL,KAAK;EACL,KAAK;EACL,KAAK;EACL,KAAK;EACL,KAAK,QACH,QAAO;EACT,QACE,OAAM,IAAI,WAAW,qBAAqB,MAAM;CACnD;AACF;;;;;;;;AASD,SAAgB,WAAWA,OAAkC;AAC3D,SAAQ,OAAR;EACE,KAAK;EACL,KAAK;EACL,KAAK;EACL,KAAK;EACL,KAAK;EACL,KAAK,QACH,QAAO;EACT,QACE,QAAO;CACV;AACF;;;;;;;;;AAUD,SAAgB,gBAAgBC,GAAaC,GAAqB;CAChE,MAAM,SAAS,UAAU,QAAQ,EAAE;AACnC,KAAI,SAAS,EACX,OAAM,IAAI,WAAW,qBAAqB,KAAK,UAAU,EAAE,CAAC;CAE9D,MAAM,SAAS,UAAU,QAAQ,EAAE;AACnC,KAAI,SAAS,EACX,OAAM,IAAI,WAAW,qBAAqB,KAAK,UAAU,EAAE,CAAC;AAE9D,QAAO,SAAS;AACjB"}